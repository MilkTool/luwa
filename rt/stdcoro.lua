coro_create = func(function(f)
	
end)

coro_running = func(function(f)
	-- TODO discard parameters
	f:loadg(oluastack)
	f:i32load(coro.stack)
	f:loadg(oluastack)
	f:call(pushvec)
	f:i32(TRUE)
	f:i32(FALSE)
	f:loadg(oluastack)
	f:i32load(coro.caller)
	f:select()
	f:call(pushvec)
	f:drop()
end)

coro_status = func(function(f)
	local a = f:locals(i32)

	f:loadg(oluastack)
	f:i32load(coro.stack)
	f:i32load(buf.ptr)
	f:loadg(oluastack)
	f:i32load(coro.data)
	f:tee(a)
	f:i32load(buf.ptr)
	f:load(a)
	f:i32load(buf.len)
	f:add()
	loadvecminus(f, 4)
	f:add()
	f:tee(a)
	f:load(a)
	f:i32load(vec.base)
	f:i32load(obj.type)
	f:i32(types.coro)
	f:eq()
	f:iff(i32, function(res)
		assert(corostate.dead == 0 and corostate.norm == 1 and corostate.live == 2 and corostate.wait == 3)
		f:block(function(wait)
			f:block(function(live)
				f:block(function(norm)
					f:block(function(dead)
						f:brtable(dead, norm, live, wait)
					end)
					f:i32(GS.dead)
					f:br(res)
				end)
				f:i32(GS.normal)
				f:br(res)
			end)
			f:i32(GS.running)
			f:br(res)
		end)
		f:i32(GS.suspended)
	end, function()
		-- error
		f:unreachable()
	end)
	f:i32store(vec.base)
end)


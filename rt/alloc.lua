heaptip = global(i32)
markbit = global(i32)
onil = global(i32)
otrue = global(i32)
ofalse = global(i32)
otmp = global(i32)

allocsize = func(i32, function(f)
	local sz = f:params(i32)
	f:load(sz)
	f:i32(7)
	f:band()
	f:iff(i32, function()
		f:load(sz)
		f:i32(-8)
		f:band()
		f:i32(8)
		f:add()
	end, function()
		f:load(sz)
	end)
end)

newobj = func(i32, function(f)
	local sz, t = f:params(i32, i32)
	local p, ht = f:i32(), f:i32()
	f:loadg(heaptip)
	f:tee(p)
	f:load(sz)
	f:add()
	f:tee(ht)
	f:i32(16)
	f:shru()
	f:current_memory()
	f:geu()
	f:iff(function(f)
		f:call(gccollect)

		f:loadg(heaptip)
		f:tee(p)
		f:load(sz)
		f:add()
		f:storeg(heaptip)
		f:loadg(heaptip)
		f:i32(16)
		f:shru()
		f:tee(sz)
		f:current_memory()
		f:geu()
		f:iff(function(f)
			f:load(sz)
			f:current_memory()
			f:sub()
			f:i32(1)
			f:add()
			f:grow_memory()
			f:drop()
		end)
	end, function()
		f:load(ht)
		f:storeg(heaptip)
	end)
	-- store header to p
	f:load(p)
	f:loadg(markbit)
	f:store()
	f:load(p)
	f:load(t)
	f:i32store8(4)
	f:load(p)
end)

newi64 = export(func(i32, function(f)
	local x = f:params(i32)
	local p = f:i32()
	f:i32(16)
	f:i32(0)
	f:call(newobj)
	f:tee(p)
	f:load(x)
	f:i64store(5)
	f:load(p)
end))

newf64 = export(func(i32, function(f)
	local x = f:params(f64)
	local p = f:i32()
	f:i32(16)
	f:i32(1)
	f:call(newobj)
	f:tee(p)
	f:load(x)
	f:f64store(5)
	f:load(p)
end))

newtable = export(func(i32, function()
	local p = f:i32()
	f:i32(32)
	f:i32(4)
	f:call(newobj)
	f:storeg(otmp)

	f:loadg(otmp) -- len, hlen = 0
	f:i64(0)
	f:i64store(5)

	f:loadg(otmp) -- arr, hash = nil
	f:loadg(onilnil64)
	f:i64store(13)

	f:loadg(otmp) -- meta = nil
	f:loadg(onil)
	f:i32store(21)

	f:loadg(otmp) -- arr = newvec(4*4)
	f:i32(16)
	f:call(newvec)
	f:i32store(13)

	f:loadg(otmp) -- hash = newvec(4*8)
	f:i32(32)
	f:call(newvec)
	f:i32store(17)

	f:loadg(otmp)
end))

newstr = export(func(i32, function(f)
	local sz = f:params(i32)
	local p, psz = f:i32(), f:i32()
	f:i32(13)
	f:load(sz)
	f:add()
	f:call(allocsize)
	f:i32(5)
	f:call(newobj)
	f:tee(p)
	f:load(sz)
	f:i32store(5)
	f:load(p)
	f:i32(0)
	f:i32store(9)

	f:load(p)
	f:load(sz)
	f:add()
	f:store(psz)

	f:block(function(bl7)
		f:block(function(bl6)
			f:block(function(bl5)
				f:block(function(bl4)
					f:block(function(bl3)
						f:block(function(bl2)
							f:block(function(bl1)
								f:block(function(bl0)
									f:load(sz)
									f:i32(7)
									f:band()
									f:brtable(bl4, bl5, bl6, bl7, bl0, bl1, bl2, bl3)
								end) -- 0
								f:load(psz)
								f:i32(0)
								f:i32store(13)
								f:load(psz)
								f:i32(0)
								f:i32store16(17)
								f:load(psz)
								f:i32(0)
								f:i32store8(19)
								f:br(bl7)
							end) -- 1
							f:load(psz)
							f:i32(0)
							f:i32store(13)
							f:load(psz)
							f:i32(0)
							f:i32store16(17)
							f:br(bl7)
						end) -- 2
						f:load(psz)
						f:i32(0)
						f:i32store(13)
						f:load(psz)
						f:i32(0)
						f:i32store8(17)
						f:br(bl7)
					end) -- 3
					f:load(psz)
					f:i32(0)
					f:i32store(13)
					f:br(bl7)
				end) -- 4
				f:load(psz)
				f:i32(0)
				f:i32store16(13)
				f:load(psz)
				f:i32(0)
				f:i32store8(15)
				f:br(bl7)
			end) -- 5
			f:load(psz)
			f:i32(0)
			f:i32store16(13)
			f:br(bl7)
		end) -- 6
		f:load(psz)
		f:i32(0)
		f:i32store8(13)
	end) -- 7
	f:load(p)
end))

--[[
struct Vec {
	00 i32
	04 i8 type6
	05 i32 len
	09 ...
}
--]]

newvec = export(func(i32, function(f)
	local sz = f:params(i32)
	local p, n = f:i32(), f:i32()
	f:i32(9)
	f:load(sz)
	f:add()
	f:call(allocsize)
	f:i32(6)
	f:call(newobj)
	f:tee(p)
	f:load(sz)
	f:i32store(5)

	-- need to start with (sz - n)%8 == 0
	f:load(sz)
	f:i32(4)
	f:band()
	f:iff(function()
		f:load(p)
		f:loadg(onil)
		f:i32store(9)
		f:i32(4)
		f:store(n)
	end)

	f:loop(i32, function(loop) -- fill vec with references to nil
		f:load(p)
		f:load(n)
		f:load(sz)
		f:eq()
		f:brif(f)
		f:load(n)
		f:add()
		f:loadg(onilnil64)
		f:i64store(9)

		f:load(n)
		f:i32(8)
		f:add()
		f:store(n)
		f:br(loop)
	end)
end))

istrue = func(i32, function(f)
	local x = f:params(i32)
	f:load(x)
	f:loadg(onil)
	f:eq()
	f:load(x)
	f:loadg(ofalse)
	f:eq()
	f:bor()
end)

math_abs = func(function(f)
	local a = f:locals(i32)
	local a64 = f:locals(i64)

	f:call(loadframebase)
	f:i32load(dataframe.base)
	f:loadg(oluastack)
	f:i32load(coro.stack)
	f:i32load(buf.ptr)
	f:add()
	f:i32load(vec.base)
	f:call(tonum)
	f:tee(a)
	f:iff(function()
		assert(types.int == 0)
		f:load(a)
		f:i32load8u(obj.type)
		f:iff(i32, function()
			f:load(a)
			f:i64load(num.base)
			f:tee(a64)
			f:i64(0)
			f:lts()
			f:iff(i32, function()
				f:i64(0)
				f:load(a64)
				f:sub()
				f:call(newi64)
			end, function()
				f:load(a)
			end)
		end, function()
			f:load(a)
			f:f64load(num.base)
			f:abs()
			f:call(newf64)
		end)
		f:call(tmppush)
	end, function()
		f:unreachable()
	end)
end)

local function genmathround(op)
	return func(function(f)
		local a = f:locals(i32)

		f:call(loadframebase)
		f:i32load(dataframe.base)
		f:loadg(oluastack)
		f:i32load(coro.stack)
		f:i32load(buf.ptr)
		f:add()
		f:i32load(vec.base)
		f:call(tonum)
		f:tee(a)
		f:iff(function()
			assert(types.int == 0)
			f:load(a)
			f:i32load8u(obj.type)
			f:iff(i32, function()
				f:load(a)
				f:f64load(num.base)
				f[op](f)
				f:i64truncs()
				f:call(newi64)	
			end, function()
				f:load(a)
			end)
			f:call(tmppush)
		end, function()
			f:unreachable()
		end)
	end)
end

math_ceil = genmathround('ceil')
math_floor = genmathround('floor')

math_frexp = func(function(f)
	--[[
	-- TODO come up with a DRY type checking strategy
	-- TODO update ABI
	f:i32(4)
	f:call(nthtmp)
	f:f64load(num.val)
	f:call(frexp)
	-- Replace param x with ret of frexp
	-- 2nd retval is already in place
	f:call(newf64)
	f:i32(8)
	f:call(setnthtmp)
	]]
end)

math_type = func(function(f)
	f:block(i32, function(res)
		assert(types.int == 0 and types.float == 1)
		f:switch(function()
			f:call(loadframebase)
			f:i32load(dataframe.base)
			f:loadg(oluastack)
			f:i32load(coro.stack)
			f:i32load(buf.ptr)
			f:add()
			f:i32load(vec.base)
			f:i32load8u(obj.type)
		end, types.int, function()
			f:i32(GS.integer)
			f:br(res)
		end, types.float, function()
			f:i32(GS.float)
			f:br(res)
		end, -1)
		f:i32(NIL)
	end)
	f:call(tmppush)
end)


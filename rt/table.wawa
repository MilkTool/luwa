use alloc

/*
struct Table {
	00 i32 ref
	04 i8 type
	05 i32 len
	09 i32 hlen
	13 obj*arr
	17 Hkv*hash
	21 Table*meta
}
*/

export func tabset
tab i32 key i32 val i32 void
kv i32 mx i32 rh i32
	load tab
	storeg otmp

	; H <- (hash(key) % tab.hash.len) & -8
	load key
	call hash
	load tab
	i32.load 17
	i32.load 5
	i32.rem_u
	i32 -8
	i32.and

	; kv <- tab.hash + H
	load tab
	i32.load 17
	i32.add
	store kv

	; mx <- tab.hash + tab.hash.len
	load tab
	i32.load 17
	i32.load 5
	load tab
	i32.load 17
	i32.add
	store mx

	loop
		; if kv.key == nil, set
		load kv
		i32.load 5
		loadg onil
		i32.eq
		if
			load kv
			load key
			i32.store 5
			load kv
			load val
			i32.store 9

			; increment hlen, mx <- hlen
			load tab
			load tab
			i32.load 9
			i32 1
			i32.add
			tee mx
			i32.store 9

			; kv <- hcap. if (mx+mx)*8 > hcap, rehash
			load mx
			load mx
			i32.add
			i32 3
			i32.shl
			load tab
			i32.load 17
			i32.load 5
			tee kv
			i32.gt_u
			if
				; val <- tab.hash
				load tab
				i32.load 17
				store val

				; tab.hash = newvec, tab.hlen = 0
				load kv
				load kv
				i32.add
				call newvec
				store key
				loadg otmp
				tee tab
				load key
				i32.store 17

				load tab
				i32 0
				i32.store 9

				; rehash. mx is oldhcap*8, val is oldhash
				loop
					; mx <- rh+val
					; if mx.key != nil && mx.val != nil
					; then tabset(tab, mx.key, mx.val)
					load rh
					load val
					i32.add
					tee mx
					i32.load 5
					loadg onil
					i32.ne
					load mx
					i32.load 9
					loadg onil
					i32.ne
					i32.and
					if
						load tab
						load mx
						i32.load 5
						load mx
						i32.load 9
						call tabset
					end

					load rh
					i32 8
					i32.add
					tee rh
					load mx
					i32.eq
					br_if 1
				end
			end
			ret
		else
			; if kv.key = key, set
			load kv
			i32.load 5
			load key
			call eq
			if
				load kv
				load val
				i32.store 9
				ret
			end

			; kv += 8, if kv == mx, kv = 0
			load kv
			i32 8
			i32.add
			tee kv
			load mx
			i32.eq
			if
				i32 0
				store kv
			end
		end
	end

export func tabget
tab i32 key i32 i32
kv i32 mx i32
	; H <- (hash(key) % tab.hash.len) & -8
	load key
	call hash
	load tab
	i32.load 17
	i32.load 5
	i32.rem_u
	i32 -8
	i32.and

	; kv = tab.hash + H
	load tab
	i32.load 17
	i32.add
	store kv

	; mx = tab.hash + tab.hash.len
	load tab
	i32.load 17
	i32.load 5
	load tab
	i32.load 17
	i32.add
	store mx

	loop
		; if kv.key == nil, ret nil
		load kv
		i32.load 5
		loadg onil
		i32.eq
		if
			loadg onil
			ret
		end

		; if kv.key == key, ret val
		load kv
		i32.load 5
		load key
		call eq
		if
			load kv
			i32.load 9
			ret
		end

		; kv += 8, if kv == mx, kv = 0
		load kv
		i32 8
		i32.add
		tee kv
		load mx
		i32.eq
		if
			i32 0
			store kv
		end
	end
	unreachable

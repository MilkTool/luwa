/*
struct Table {
	00 i32 ref
	04 i8 type
	05 i32 len
	09 i32 hlen
	13 vec arr
	17 vec hash
	21 tbl meta
}
*/

export func tabset
tab i32 key i32 val i32 void
kv i32 mx i32
	load tab
	storeg otmp

	; H <- (hash(key) % tab.hash.len) & -8
	load key
	call hash
	load tab
	i32.load 17
	tee mx
	i32.load 5
	i32.rem_u
	i32 -8
	i32.and

	; kv <- tab.hash + H
	load mx
	i32.add
	store kv

	; mx <- tab.hash + tab.hash.len
	load mx
	load mx
	i32.load 5
	i32.add
	store mx

	loop
		; if kv.key == nil, set
		load kv
		i32.load 9
		loadg onil
		i32.eq
		if
			load kv
			load key
			i32.store 9
			load kv
			load val
			i32.store 13

			; hlen += 8, mx <- hlen
			load tab
			load tab
			i32.load 9
			i32 8
			i32.add
			tee mx
			i32.store 9

			; kv <- hcap. if mx+mx > hcap, rehash
			load mx
			load mx
			i32.add
			load tab
			i32.load 17
			i32.load 5
			tee kv
			i32.gt_u
			if
				; tab.hash = newvec, tab.hlen = 0
				load kv
				load kv
				i32.add
				call newvec
				store key

				; val <- tab.hash, mx <- tab.hash + tab.hash.len
				; have to do between call to newvec and updating tab.hash
				load tab
				i32.load 17
				tee val
				load val
				i32.load 5
				i32.add
				store mx

				loadg otmp
				tee tab
				load key
				i32.store 17

				load tab
				i32 0
				i32.store 9

				; rehash. val is oldhash. mx is oldhash+oldhash.len
				loop
					; if val.key != nil && val.val != nil
					; then tabset(tab, val.key, val.val)
					load val
					i32.load 9
					loadg onil
					i32.ne
					load val
					i32.load 13
					loadg onil
					i32.ne
					i32.and
					if
						load tab
						load val
						i32.load 9
						load val
						i32.load 13
						call tabset
					end

					load val
					i32 8
					i32.add
					tee val
					load mx
					i32.eq
					br_table 0 1
				end
			end
			ret
		else
			; if kv.key = key, set
			load kv
			i32.load 9
			load key
			call eq
			if
				load kv
				load val
				i32.store 13
				ret
			end

			; kv += 8, if kv == mx, kv = tab.hash
			load kv
			i32 8
			i32.add
			tee kv
			load mx
			i32.ne
			br_if 1
			load tab
			i32.load 17
			store kv
		end
		br 0
	end

export func tabget
tab i32 key i32 i32
kv i32 mx i32
	; H <- (hash(key) % tab.hash.len) & -8
	load key
	call hash
	load tab
	i32.load 17
	tee mx
	i32.load 5
	i32.rem_u
	i32 -8
	i32.and

	; kv = tab.hash + H
	load mx
	i32.add
	store kv

	; mx = tab.hash + tab.hash.len
	load mx
	load mx
	i32.load 5
	i32.add
	store mx

	loop i32
		; if kv.key == nil, ret nil
		load kv
		i32.load 9
		loadg onil
		i32.eq
		if
			loadg onil
			ret
		end

		; if kv.key == key, ret val
		load kv
		i32.load 9
		load key
		call eq
		if
			load kv
			i32.load 13
			ret
		end

		; kv += 8, if kv == mx, kv = tab.hash
		load kv
		i32 8
		i32.add
		tee kv
		load mx
		i32.ne
		br_if 0
		load tab
		i32.load 17
		store kv

		br 0
	end

use alloc

/*
struct Hkv {
	obj*key
	obj*val
}

struct Table {
	i32 ref
	i8 type
	i32 len
	i32 kappa
	obj*arr
	i32 hlen
	i32 hcap
	Hkv*hash
	Table*meta
}
*/

const sizeofHkv 8
const sizeofTable 34

func hash
o i32 i32
	block
	block
	block
	block
	block
	block
	load o
	i32.load8_u 4
	br_table 0 1 2 3 4 5
	end ;0 i64
	load o
	i32.load 5
	load o
	i32.load 9
	i32.xor
	ret
	end ;1 f64 TODO H(1.0) == H(1)
	load o
	i32.load 5
	load o
	i32 load 9
	i32.xor
	ret
	end ;2 nil
	load o
	ret
	end ;3 bool
	load o
	ret
	end ;4 table
	load o
	ret
	end ; 5 string
	load o
	i32.load 5
	ret

func mktable
i32
p i32
	i32 sizeofTable
	call malloc
	tee p
	i32 1
	i32.store
	load p
	i32 4
	i32.store8 4

	load p ;len,kappa = 0
	i64 0
	i64.store 5

	load p ; arr,hlen = 0
	i64 0
	i64.store 13

	load p ; hcap,hash = 0
	i64 0
	i64.store 21
	load p

	loadg onil ; meta = nil
	i32.store 29
	load p
	ret

func tabset
tab i32 key i32 val i32 void
	ret

func tabget
tab i32 key i32 i32
kv i32 mx i32
	load key
	call hash

	; H <- H%cap(T)
	load tab
	i32.load 21
	i32.rem

	; H <- H*8
	i32 3
	i32.shl

	; kv = tab.hash[H]
	load tab
	i32.load 25
	i32.add
	store kv

	load tab
	i32.load 21
	i32 3
	i32.shl
	load tab
	i32.load 25
	i32.add
	store mx

	loop
		; if kv.key == nil, ret nil
		load kv
		i32.load
		loadg onil
		i32.eq
		if
			loadg onil
			call incref
			ret
		end

		; if kv.key == key, ret val
		load kv
		i32.load
		load key
		call eq
		if
			load kv
			i32.load 4
			call incref
			ret
		end

		; kv += 8, if kv == mx, ret nil
		load kv
		i32 8
		i32.add
		tee kv
		load mx
		i32.eq
		if
			loadg onil
			call incref
			ret
		end
	end

/*
Decref children
*/
func freetable
x i32 void
	load x
	call free 
